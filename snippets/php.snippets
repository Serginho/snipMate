snippet php
	<?php
	${1}
	?>
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
# $... = array (...)

# Controllers
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}

snippet dela
	$this->${1:ModelName}->deleteAll(${2:$conditions}${3: ,$cascade});

snippet id=
	$this->${1:ModelName}->id = ${2:$id};

snippet save
	$this->${1:ModelName}->save(${2:$this->data});

snippet savef
	$this->${1:ModelName}->saveField('${2:$field}', ${3:$fieldValue});

snippet upa
	$this->${1:ModelName}->updateAll(${2:$fields}${3: ,$conditions});

snippet find
	$this->${1:ModelName}->find('${2:all}'${3: ,$params});

snippet findby
	$this->${1:ModelName}->findBy${2:FieldName}(${3:$value});

snippet findallby
	$this->${1:ModelName}->findAllBy${2:FieldName}(${3:$value}));

snippet field
	$this->${1:ModelName}->field(${2:'${3:name}'}, ${4:'conditions'}, ${5:'order'});

# Sessions
snippet scheck
	$this->Session->check('${1:Controller}.${2:key}');

snippet sdel
	$this->Session->delete('${1:Controller}.${2:key}');

snippet sdes
	$this->Session->destroy();

snippet serr
	$this->Session->error();

snippet sid
	$this->Session->id();

snippet sread
	$this->Session->read('${1:Controller}.${2:key}');

snippet sres
	$this->Session->restore();

snippet sflash
	$this->Session->setFlash('${1:message}'${2:, 'default'}${3:, $params});

snippet svalid
	$this->Session->valid();

snippet swrite
	$this->Session->write('${1:Controller}.${2:key}', '${3:value}');

snippet serrhelper
	<?php echo $this->Session->error(); ?>

snippet sflashhelp
	<?php echo $this->Session->flash(${1:'key'}); ?>

snippet sreadhelp
	<?php echo $this->Session->read('${1:key}'); ?>
# Assert
snippet assertE
	$this->assertEqual(${1:$result}, ${2:$expected});

snippet assertF
	$this->assertFalse(${1:$result});

snippet assertP
	$this->assertPattern(${1:'/${2:pattern}/'}, ${3:$result});

snippet assertT
	$this->assertTrue(${1:$result})

# Misc
snippet echo 
	<?php echo $${1:data}['${2:Model}']['${3:field}']; ?>
snippet de
	debug($${1:data});

snippet pr
	pr($${1:data});

snippet set 
	$this->set('${1:var}', $${2:$1});

snippet app
	App::import('${1:LibraryName}'${2:, 'ClassName'});

snippet afterfil
	function afterFilter() {
		${1}
	}

snippet beforefil
	function beforeFilter() {
		${1:'code'}
	
	}

snippet beforeren
	function beforeRender() {
		${1:'code'}
	}

# Callback methods
snippet afterfind
	
	function afterFind(${1:$results}) {
		${2:'code'}
	}

snippet aftersave
	function afterSave(${1:$created}) {
		${2:'code'}
	}

snippet beforedelete
	function beforeDelete() {
		${1:'code'}
	}

snippet beforefind
	function beforeFind(${1:$queryData}) {
		${2:'code'}
	}

snippet beforesave
	function beforeSave() {
		${1:'code'}
	}

snippet beforevalidate
	function beforeValidate() {
		${1:'code'}
	}
	}

snippet onerror
	function onError() {
		${1:'code'}
	}

# Model
snippet act
	var $actsAs = array('${1:BehaviorName}'${2: => ConfigForBehavior});

snippet bt
	var $belongsTo = array('${1:Model}');

snippet habtm
	var $hasAndBelongsToMany = array('${1:Model}');

snippet hm
	var $hasMany = array('${1:Model}');

snippet ho
	var $hasOne = array('${1:Model}');
